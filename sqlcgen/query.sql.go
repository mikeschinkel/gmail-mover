// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlcgen

import (
	"context"
)

const deleteMetadata = `-- name: DeleteMetadata :exec
DELETE FROM metadata WHERE key = ?
`

func (q *Queries) DeleteMetadata(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteMetadata, key)
	return err
}

const getMetadata = `-- name: GetMetadata :one

SELECT value FROM metadata WHERE key = ?
`

// Metadata operations for database identification and sync state
func (q *Queries) GetMetadata(ctx context.Context, key string) (string, error) {
	row := q.db.QueryRowContext(ctx, getMetadata, key)
	var value string
	err := row.Scan(&value)
	return value, err
}

const listMetadata = `-- name: ListMetadata :many
SELECT key, value FROM metadata ORDER BY key
`

func (q *Queries) ListMetadata(ctx context.Context) ([]Metadata, error) {
	rows, err := q.db.QueryContext(ctx, listMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadata
	for rows.Next() {
		var i Metadata
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setMetadata = `-- name: SetMetadata :exec
INSERT OR REPLACE INTO metadata (key, value) VALUES (?, ?)
`

type SetMetadataParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) SetMetadata(ctx context.Context, arg SetMetadataParams) error {
	_, err := q.db.ExecContext(ctx, setMetadata, arg.Key, arg.Value)
	return err
}
